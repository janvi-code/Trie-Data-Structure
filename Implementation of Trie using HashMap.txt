import java.util.*;
import java.lang.*;
class TrieNode
{
	Map<Character,TrieNode> children;
	boolean isEnd;
	TrieNode(){
		children = new HashMap<Character,TrieNode>();
		isEnd = false;
	}
}
class Trie
{
	TrieNode root = new TrieNode();
	public void insert(String str) {
		TrieNode t = root;
		for(int i=0;i<str.length();i++) {
			char ch = str.charAt(i);
			if(t.children.containsKey(ch) == false) {
				t.children.put(ch, new TrieNode());
			}
			t = t.children.get(ch);
		}
		t.isEnd = true;
	}
	public boolean search(String str) {
		TrieNode t = root;
		for(int i=0;i<str.length();i++) {
			char ch = str.charAt(i);
			if(t.children.containsKey(ch) == false) {
				return false;
			}
			t = t.children.get(ch);
		}
		if(t.isEnd == false)
			 return false;
		return true;
	}
	public void delete(String str) {
		TrieNode r = root;
		boolean t = deleteNode(r,str,0);
	}
	private boolean deleteNode(TrieNode curNode,String str, int i) {
		if(i == str.length()) {
			if(!curNode.isEnd) {
				return false;	
			}
		    curNode.isEnd = false;
			return curNode.children.size() == 0;
		}
		char ch = str.charAt(i);
		TrieNode t = curNode.children.get(ch);
		if(t == null)
			return false;
		boolean shouldDeleteNode = deleteNode(t, str, i+1);
		if(shouldDeleteNode) {
			t.children.remove(ch);
			return t.children.size() == 0;
		}
		return false;
	}
	
}

public class Main {
    public static void main(String[] args) {
	     Scanner sc = new Scanner(System.in);
	     Trie tree = new Trie();
	     int n = sc.nextInt();
	     for(int i=1;i<=n;i++) {
	    	 String s = sc.next();
	    	 tree.insert(s);
	     }
	     System.out.println("Enter word to serach: ");
	     String str = sc.next();
	     if(tree.search(str)==true)
	    	  System.out.println("found");
	     else
	    	 System.out.println("Not found");
	     tree.delete("Jaan");
	     if(tree.search("Jaan")==true)
	    	  System.out.println("found");
	     else
	    	 System.out.println("Not found"); 
	}

}

